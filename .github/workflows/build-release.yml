name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS builds
          - platform: 'mac'
            os: 'macos-latest'
            artifact_name: 'macos'
            
          # Windows builds
          - platform: 'win'
            os: 'windows-latest'
            artifact_name: 'windows'
            
          # Linux builds
          - platform: 'linux'
            os: 'ubuntu-latest'
            artifact_name: 'linux'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.12.1
          run_install: false  # Don't auto-install
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: |
          # Install root and workspace dependencies with pnpm
          pnpm install --no-frozen-lockfile
          # Install Electron client dependencies with npm separately
          cd apps/client
          npm ci
        env:
          # Ignore engine warnings for Node.js version
          ENGINE_STRICT: false
          # Ensure proper Python setup for node-gyp
          PYTHON: python3
        
      - name: Build web app
        run: |
          cd apps/web
          pnpm run build
        env:
          VITE_CLOUDINARY_UPLOAD_PRESET: ${{ secrets.CLOUDINARY_UPLOAD_PRESET }}
          VITE_CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}

      - name: Copy web build to client
        shell: bash
        run: |
          # Debug: Check directory structure
          echo "Current directory: $(pwd)"
          echo "Web dist contents:"
          ls -la apps/web/dist/ || echo "Web dist directory not found"
          echo "Client directory before copy:"
          ls -la apps/client/ || echo "Client directory not found"
          
          cd apps/client
          npm run copy-web
          
          # Debug: Verify copy was successful
          echo "Client web directory after copy:"
          ls -la web/ || echo "Web directory not created"

      - name: Build Electron app
        shell: bash
        run: |
          cd apps/client
          npm run dist -- --${{ matrix.platform }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VITE_CLOUDINARY_UPLOAD_PRESET: ${{ secrets.CLOUDINARY_UPLOAD_PRESET }}
          VITE_CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lumi-${{ matrix.artifact_name }}
          path: |
            apps/client/dist/**/*
          retention-days: 1

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/**/*.dmg
            artifacts/**/*.zip
            artifacts/**/*.exe
            artifacts/**/*.msi
            artifacts/**/*.deb
            artifacts/**/*.rpm
            artifacts/**/*.AppImage
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}