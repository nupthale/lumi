name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS builds (both Intel and Apple Silicon)
          - platform: 'macos-x64'
            os: 'macos-latest'
            arch: 'x64'
            artifact_name: 'macos-x64'
            
          - platform: 'macos-arm64'
            os: 'macos-latest'
            arch: 'arm64'
            artifact_name: 'macos-arm64'
            
          # Windows builds
          - platform: 'windows-x64'
            os: 'windows-latest'
            arch: 'x64'
            artifact_name: 'windows-x64'
            
          # Linux builds (optional)
          - platform: 'linux-x64'
            os: 'ubuntu-latest'
            arch: 'x64'
            artifact_name: 'linux-x64'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '23'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.12.1
          run_install: false  # Don't auto-install
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: |
          # Update pnpm and regenerate lockfile if needed
          pnpm install --no-frozen-lockfile
        env:
          # Ignore engine warnings for Node.js version
          ENGINE_STRICT: true
        
      - name: Build web app
        run: |
          cd apps/web
          pnpm run build

      - name: Copy web build to client
        shell: bash
        run: |
          cd apps/client
          npm run copy-web

      - name: Build Electron app
        shell: bash
        run: |
          cd apps/client
          npm run make -- --arch=${{ matrix.arch }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lumi-${{ matrix.artifact_name }}
          path: |
            apps/client/out/make/**/*
          retention-days: 30

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/**/*.dmg
            artifacts/**/*.zip
            artifacts/**/*.exe
            artifacts/**/*.msi
            artifacts/**/*.deb
            artifacts/**/*.rpm
            artifacts/**/*.AppImage
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}